This is a file for integration testing
If you change this file,
THE INTEGRATION TESTS WILL BREAK

Integer Operator Tests
1+2= // Confirmed 3
3-4= // Confirmed -1
5*6= // Confirmed 30
7/8= // Confirmed 0.875
10^2= // Confirmed 100
2R64= // Confirmed 8
10L1000= // Confirmed 3

Float Operator Tests
1.1+2.2= // Confirmed 3.3
3.3-4.4= // Confirmed -1.1
5.5*6.6= // Confirmed 36.3
7.7/8.8= // Confirmed 0.875
10.10^2.2= // Confirmed 161.997019
2.2R64.4= // Confirmed 6.640807
5.5L666.666= // Confirmed 3.814223

Negative Integer Tests
-1+-2= // Confirmed -3
-3--4= // Confirmed 1
-5*-6= // Confirmed 30
-7/-8= // Confirmed 0.875
-10^-2= // -0.01
-2R64= // Confirmed 0.125
-5.5L666.666= // Confirmed Error 113

Negative Float Operator Tests
-1.1+-2.2= // Confirmed -3.3
-3.3--4.4= // Confirmed 1.1
-5.5*-6.6= // Confirmed 36.3
-7.7/-8.8= // Confirmed 0.875
-10.10^-2.2= // Confirmed -0.06173

Order of Operations Tests
4+2-3*6^2/4= // Confirmed -21
(4+2-3)*(6^2/4)= // Confirmed 27
4.4+2.2-3.3*6.6^2.2/4.4= // Confirmed -41.04945
(4.4+2.2-3.3)*(6.6^2.2/4.4)= // 47.64946
-4+-2--3*-6^2/-4= // Confirmed -33
(-4+-2--3)*(-6^2/-4)= // Confirmed 27
(1*2)R(8^2)= // Confirmed 8
(5+5)L(500*2)= // Confirmed 3

Brackets Tests
(4)+(5)+6= // Confirmed 15
(4)-(5)-6= // Confirmed -7
(4)*(5)*6= // Confirmed 120
(4)/(5)/6= // Confirmed 0.13333
(4)^(2)^3= // Confirmed 4096
(2)R(64)R256= // Confirmed 2
(10)L(1000)= // Confirmed 3

Brackets with Negatives Test
(-4)+(-5)+-6= // Confirmed -15
(-4)-(-5)--6= // Confirmed 7
(-4)*(-5)*-6= // Confirmed -120
(-4)/(-5)/-6= // Confirmed -0.133333
(-4)^(2)^3= // Confirmed 4096
(-2)R(64)R256= // Confirmed 18446744073709552000
(-10)L(1000)= // Confirmed Error 113

Divide by Zero Errors
100/0=
-0 // TODO: -0 gets initialized as NaN in NSDecimalNumber which throws exception

Math Notes Tests
This test ensures that 2+2= and -2--3= and other 10/0 errors get shown in mid sentence like Math Notes that Apple added in macOS 15= Sequoia. This should also work if2+2=text directly abutts the numbers. Same with brackets like (2)= and(2)=like that.

Roots and Logs Tests
8^0= // 1
8^1= // 8
8^2= // 64
8^3= // 512
-8^2= // 64, positive answer when base is negative and power is even
-8^3= // -512, negative answer when base is negative and power is odd
8^-3= // 0.0019
8^-2= // 0.0156s

Rooting with arbitrary bases
2R64= // 8, Square root of 64
3R64= // 4, Cube root of 64
4R64= // 2.828
5R64= // 2.973
6R64= // 2

Logarithm with arbitrary bases
10L1000= // 3, log10(1000)
9L1000= // 3.1438 
8L1000= // 3.3219
7L1000= // 3.5498
2L1000= // 9.9657, log2(1000)

Root Errors
0R64= Index Zero Error
2R-64= Imaginary when base is negative and power is even
3R-64= -4, not an error
64^(1/2)= // Confirmed 8
-64^(1/2)= // Confirmed Imaginary
-64^(1/3)= // TODO: Confirmed -4

Logarithm Errors
10L-1000= Log argument less than 0
-2L1000= Log base negative
0L1000= Log base 0
1L1000=Log base is 1
0.5L1000= // -9.9657, not an error

